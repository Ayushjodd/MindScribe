generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String?   @unique
  imageUrl        String?
  twitter         String?
  linkedIn        String?
  personalWebsite String?
  Telegram        String?
  bio             String?
  password        String?
  name            String?   @default("")
  profilePicture  String?   @default("")
  email           String    @unique
  posts           Blog[]
  likes           Like[]
  bookmarks       Bookmark[]
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  followers       Follow[]  @relation("followers")
  following       Follow[]  @relation("following")
  membership      Membership?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt  // Added default value here
}

model Blog {
  id          Int        @id @default(autoincrement())
  title       String
  imageUrl    String?
  description String
  content     String
  published   Boolean    @default(false)
  author      User       @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime   @default(now())
  likes       Int        @default(0)
  likedBy     Like[]
  bookmarks   Bookmark[]
  category    String?
}

model Membership {
  id            String    @id @default(uuid())
  type          MembershipType @default(BASIC)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String    @unique  
  startDate     DateTime  @default(now())
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Like {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId Int

  @@unique([userId, blogId])
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId    Int

  @@unique([userId, blogId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MembershipType {
  BASIC
  ADVANCE
  PRO
}